name: Update Changelog

on:
  push:
    # branches:
    #   - main

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.cliff.outputs.has_changes }}
      version: ${{ steps.cliff.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Check for unreleased changes
        id: cliff
        run: |
          VERSION=$(git-cliff --bumped-version 2>stderr.txt)
          if grep -q "There is nothing to bump" stderr.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  release:
    needs: check_changes
    if: needs.check_changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Checkout next release branch
        run: |
          git checkout prepare-next-release || git checkout -b prepare-next-release
          git-cliff --unreleased -o
          git add CHANGELOG.md
          git commit -m "chore(CHANGELOG): update [skip ci]" || echo "No changes to commit"
          git push --set-upstream origin prepare-next-release

      - name: Check if release PR exists
        id: pr_check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if gh pr list --state open --search "chore: release" --json title | grep -q '"title":'; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release PR if not exists
        if: steps.pr_check.outputs.pr_exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
            --title "chore: release ${{ needs.check_changes.outputs.version }}" \
            --body "" \
            --base main \
            --head prepare-next-release

      - name: Update PR body with changelog
        run: |
          PR_NUMBER=$(gh pr list --state open --head prepare-next-release --json number -q '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr edit "$PR_NUMBER" --body "$(git-cliff --latest)"
          fi
